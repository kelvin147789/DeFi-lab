[{"/Users/ok/Desktop/Projects/defi-lab/src/App.js":"1","/Users/ok/Desktop/Projects/defi-lab/src/index.js":"2"},{"size":5128,"mtime":1611212210753,"results":"3","hashOfConfig":"4"},{"size":221,"mtime":1608443671131,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1vo6wfc",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ok/Desktop/Projects/defi-lab/src/App.js",["11","12","13"],"import React, { useState, useEffect, useRef } from 'react';\nimport './index.css'\n\nimport {ReactComponent as BellIcon} from './icons/bell.svg'\nimport {ReactComponent as MessengerIcon} from './icons/messenger.svg'\nimport {ReactComponent as CaretIcon} from './icons/caret.svg'\nimport {ReactComponent as PlusIcon} from './icons/plus.svg'\nimport {ReactComponent as CogIcon} from './icons/cog.svg'\nimport {ReactComponent as ChevronIcon} from './icons/chevron.svg'\nimport {ReactComponent as ArrowIcon} from './icons/arrow.svg'\nimport {ReactComponent as BoltIcon} from './icons/bolt.svg'\nimport { Icon } from '@material-ui/core';\nimport { MetaMaskButton,Flex, Box } from 'rimble-ui';\n\nimport {CSSTransition} from 'react-transition-group';\n\n\n\nfunction App() {\n  return (\n    \n    <div>\n\n<div className=\"title\">DeFi Lab</div>\n    <Navbar>\n      <NavItem icon={<PlusIcon />} />\n      <NavItem icon={<BellIcon />} />\n      <NavItem icon={<MessengerIcon />} />\n\n      <NavItem icon={<CaretIcon />}>\n        <DropdownMenu></DropdownMenu>\n      </NavItem>\n\n     \n    </Navbar>\n    <Context></Context>\n    </div>\n    \n\n   \n  );\n}\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\">{props.children}</ul>\n    </nav>\n  );\n}\n\nfunction NavItem(props) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"#\" className=\"icon-button\" onClick={() => setOpen(!open)}>\n        {props.icon}\n      </a>\n\n      {open && props.children}\n    </li>\n  );\n}\n\nfunction DropdownMenu() {\n  const [activeMenu, setActiveMenu] = useState('main');\n  const [menuHeight, setMenuHeight] = useState(null);\n  const dropdownRef = useRef(null);\n\n  useEffect(() => {\n    setMenuHeight(dropdownRef.current?.firstChild.offsetHeight)\n  }, [])\n\n  function calcHeight(el) {\n    const height = el.offsetHeight;\n    setMenuHeight(height);\n  }\n\n  function DropdownItem(props) {\n    return (\n      <a href=\"#\" className=\"menu-item\" onClick={() => props.goToMenu && setActiveMenu(props.goToMenu)}>\n        <span className=\"icon-button\">{props.leftIcon}</span>\n        {props.children}\n        <span className=\"icon-right\">{props.rightIcon}</span>\n      </a>\n    );\n  }\n\n  return (\n    <div className=\"dropdown\" style={{ height: menuHeight }} ref={dropdownRef}>\n\n      <CSSTransition\n        in={activeMenu === 'main'}\n        timeout={500}\n        classNames=\"menu-primary\"\n        unmountOnExit\n        onEnter={calcHeight}>\n        <div className=\"menu\">\n          <DropdownItem>My Profile</DropdownItem>\n\n          <DropdownItem\n            leftIcon={<CogIcon />}\n            rightIcon={<ChevronIcon />}\n            goToMenu=\"settings\">\n            Settings\n          </DropdownItem>\n\n\n          <DropdownItem\n            leftIcon=\"🦧\"\n            rightIcon={<ChevronIcon />}\n            goToMenu=\"animals\">\n            Animals\n          </DropdownItem>\n\n\n        </div>\n      </CSSTransition>\n\n      <CSSTransition\n        in={activeMenu === 'settings'}\n        timeout={500}\n        classNames=\"menu-secondary\"\n        unmountOnExit\n        onEnter={calcHeight}>\n        <div className=\"menu\">\n          <DropdownItem goToMenu=\"main\" leftIcon={<ArrowIcon />}>\n            <h2>My Tutorial</h2>\n          </DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>HTML</DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>CSS</DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>JavaScript</DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>Awesome!</DropdownItem>\n        </div>\n      </CSSTransition>\n\n      <CSSTransition\n        in={activeMenu === 'animals'}\n        timeout={500}\n        classNames=\"menu-secondary\"\n        unmountOnExit\n        onEnter={calcHeight}>\n        <div className=\"menu\">\n          <DropdownItem goToMenu=\"main\" leftIcon={<ArrowIcon />}>\n            <h2>Animals</h2>\n          </DropdownItem>\n          <DropdownItem leftIcon=\"🦘\">Kangaroo</DropdownItem>\n          <DropdownItem leftIcon=\"🐸\">Frog</DropdownItem>\n          <DropdownItem leftIcon=\"🦋\">Horse?</DropdownItem>\n          <DropdownItem leftIcon=\"🦔\">Hedgehog</DropdownItem>\n        </div>\n      </CSSTransition>\n    </div>\n  );\n}\n\nfunction Context(props) {\n  return(\n    <div className=\"context\">\n      <div className=\"spacing-bottom\">\n      Welcome to DeFi Lab, enjoy experiment here.\n      </div>\n\n     <div>\n     <button class=\"cybr-btn\">\n  Start<span aria-hidden>_</span>\n  <span aria-hidden class=\"cybr-btn__glitch\">Start_</span>\n  <span aria-hidden class=\"cybr-btn__tag\">R25</span>\n</button>\n     </div>\n\n{/* Separate line */}\n\n<div className=\"separateLine\">\n<Flex>\n  <Box p={0.2} width={1 / 2} color=\"salmon\" bg=\"black\">\n    Separate\n  </Box>\n  <Box p={0.2} width={1 / 2} color=\"white\" bg=\"salmon\">\n  line\n  </Box>\n</Flex>\n</div>\n\n\n\n{/* Separate line */}\n\n\n{/* Connect Metamsk wallet */}\n\n    <div className=\"metaMaskButton\">\n    <div>MetaMask Wallet Connect:</div>\n    <MetaMaskButton className=\"spacingTop\">Connect with MetaMask</MetaMaskButton>\n    </div>\n\n\n{/* Connect Metamsk wallet */}\n\n    \n    </div>\n  )\n}\n\nexport default App;\n\n\n\n\n\n","/Users/ok/Desktop/Projects/defi-lab/src/index.js",[],{"ruleId":"14","severity":1,"message":"15","line":12,"column":10,"nodeType":"16","messageId":"17","endLine":12,"endColumn":14},{"ruleId":"18","severity":1,"message":"19","line":57,"column":7,"nodeType":"20","endLine":57,"endColumn":74},{"ruleId":"18","severity":1,"message":"19","line":82,"column":7,"nodeType":"20","endLine":82,"endColumn":105},"no-unused-vars","'Icon' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]